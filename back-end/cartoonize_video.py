# -*- coding: utf-8 -*-
"""White-box-Cartoonization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/udaykondreddy/white_box_cartoonization_js/blob/main/code/White_box_Cartoonization.ipynb

Big Thanks to these people(credits)

- Xinrui Wang and Jinze Yu for creating such amazing application. you can find the paper [here](https://openaccess.thecvf.com/content_CVPR_2020/html/Wang_Learning_to_Cartoonize_Using_White-Box_Cartoon_Representations_CVPR_2020_paper.html) and code [here](https://github.com/steubk/White-box-Cartoonization.git)
- Margaret Maynard-Reid and Sayak Paul for creating the lite version of this to deploy it on android and most of the code is taken from them. You can find it [here](https://blog.tensorflow.org/2020/09/how-to-create-cartoonizer-with-tf-lite.html)
- Pratap Vardhan on his work on developing a web app using tensorflow JS
"""

#clone the github repository of original implementation of White-box-Cartoonization by Xinrui Wang and Jinze Yu.
!git clone --branch inference-tf-2.x https://github.com/steubk/White-box-Cartoonization.git

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

import sys
sys.path.append('./White-box-Cartoonization/test_code')

import os
import matplotlib.pyplot as plt
import cartoonize
import tensorflow as tf 
from PIL import Image

#create a directory to upload the video
!mkdir -p ./video_input
!mkdir -p ./video_output

# Opens the Video file
import cv2
cap= cv2.VideoCapture('/content/vid.mp4')
i=0
while(cap.isOpened()):
    ret, frame = cap.read()
    if ret == False:
        break
    cv2.imwrite('/content/video_input/sample'+str(i)+'.jpg',frame)
    i+=1
 
cap.release()
cv2.destroyAllWindows()

#test the model with sample data
import os

model_path = './White-box-Cartoonization/test_code/saved_models'
load_folder = './video_input'
save_folder = './video_output'
if not os.path.exists(save_folder):
    os.mkdir(save_folder)
    
cartoonize.cartoonize(load_folder, save_folder, model_path)

import cv2
import numpy as np
import os
 
from os.path import isfile, join
 
def convert_frames_to_video(pathIn,pathOut,fps):
    frame_array = []
    os.chdir("/content/video_output/") 
      
    images = [img for img in os.listdir('.') 
              if img.endswith(".jpg") or
                 img.endswith(".jpeg") or
                 img.endswith("png")] 
 
    #for sorting the file names properly
    files = sorted(images)
 
    for i in range(len(files)):
        filename=pathIn +"/" + files[i]
        #reading each files
        img = cv2.imread(filename)
        height, width, layers = img.shape
        size = (width,height)
        #inserting the frames into an image array
        frame_array.append(img)
 
    out = cv2.VideoWriter(pathOut,cv2.VideoWriter_fourcc(*'DIVX'), fps, size)
 
    for i in range(len(frame_array)):
        # writing to a image array
        out.write(frame_array[i])
    out.release()
 
def main():
    pathIn= '/content/video_output'
    pathOut = '/content/video.avi'
    fps = 25.0
    convert_frames_to_video(pathIn, pathOut, fps)
 
if __name__=="__main__":
    main()